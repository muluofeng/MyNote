name=embedded-engine
connector.class=io.debezium.connector.mysql.MySqlConnector
## offset config begin - 使用文件来存储已处理的binlog偏移量
offset.storage=org.apache.kafka.connect.storage.FileOffsetBackingStore
offset.storage.file.filename=/Users/muluofeng/workspace/java/MyNote/Debezium/src/main/resources/offsets/mysql_offsets.dat
offset.flush.interval.ms=0
## offset config end


database.hostname=localhost
database.port=3306
database.user=root
database.password=Xing0830
## 需要与MySQL的server-id不同
database.server.id=1
database.server.name=my-app-connector

schema.history.internal=io.debezium.storage.file.history.FileSchemaHistory
schema.history.internal.file.filename=/Users/muluofeng/workspace/java/MyNote/Debezium/src/main/resources/dbhistory/dbhistory.dat
## 要捕获的数据库名
database.include.list=test
## 要捕获的数据表
table.include.list=test.debezium_signal,test.users
snapshot.new.tables=parallel
## 信令数据收集配置表。插入该表中的数据可以 实现数据同步快照
signal.data.collection=test.debezium_signal
## 时区
database.serverTimezone=Asia/Shanghai
## 每次批处理多少条记录
max.batch.size=2

topic.prefix=muluofeng
## 全量+增量
snapshot.mode=initial
poll.interval.ms=1000
## 是否包含ddl语句
include.schema.changes=true
#converters=datetime
#DateTimeConverter.CONVERTERS_TYPE=com.example.debezium.config.DateTimeConverter

##  MySQL 连接器将快照事件作为 READ 操作 ("op" : "r 发出 ，如果您希望连接器将快照事件作为 CREATE ( c ) 事件发出 请配置 Debezium ReadToInsertEvent
transforms=snapshotasinsert
transforms.snapshotasinsert.type=io.debezium.connector.mysql.transforms.ReadToInsertEvent

