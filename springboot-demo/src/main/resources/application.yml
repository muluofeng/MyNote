server:
  port: 8080
spring:
  jpa:
    show-sql: true
  datasource:
    #driver-class-name: com.mysql.cj.jdbc.Driver
    #5.1.22 版本采用下面这种方式
    driver-class-name: com.mysql.jdbc.Driver
    #俩个系统不同的数据库配置
    druid:
      url: jdbc:mysql://localhost:3306/hibernatetest?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=America/New_York
      username: root
      password: root
    type: com.alibaba.druid.pool.DruidDataSource
    #连接池配置
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j

  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    password:
    #   redis   session 配置
  session:
    store-type: redis
    redis:
      namespace: SESSIONS
      #session更新策略，有ON_SAVE、IMMEDIATE，前者是在调用#SessionRepository#save(org.springframework.session.Session)时，在response commit前刷新缓存，#后者是只要有任何更新就会刷新缓存
      flush-mode: on_save


# Logging configuration
logging:
  level:
    org.springframework:
      data: DEBUG
      security: DEBUG



#自定义starter的配置
storage:
  service:
    enabled: true
    password: my-password
    username: my-username
    url: my-url


# 文件系统
minio:
  url: http:://106.54.237.135:9000
  access-key: minio
  secret-key: miniostorage
  bucket-name: test

